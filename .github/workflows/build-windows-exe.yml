name: Build Windows EXE

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # 安装Chocolatey包管理器
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # 刷新Chocolatey包列表
        choco refresh
        
        # 安装Tesseract OCR（只安装基础包，语言包通过其他方式获取）
        choco install tesseract --yes
        
        # 设置环境变量
        echo "TESSDATA_PREFIX=C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata" >> $env:GITHUB_ENV
        
    - name: Download Tesseract language data
      run: |
        # 创建tessdata目录
        mkdir -p "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata"
        
        # 下载中文简体语言包
        Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/chi_sim.traineddata" -OutFile "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata\chi_sim.traineddata"
        
        # 下载英文语言包
        Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata" -OutFile "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata\eng.traineddata"
        
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
        pip install -r requirements_gui.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
        pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple/
        
    - name: Download EasyOCR models using EasyOCR
      run: |
        echo "🔍 使用EasyOCR自动下载模型文件..."
        
        # 创建Python脚本来下载模型
        $downloadScript = @"
import easyocr
import os
import time

print("🚀 开始使用EasyOCR自动下载模型...")

try:
    print("📥 正在下载中文简体模型...")
    reader_ch = easyocr.Reader(['ch_sim'], gpu=False)
    print("✅ 中文简体模型下载完成")
    
    print("📥 正在下载英文模型...")
    reader_en = easyocr.Reader(['en'], gpu=False)
    print("✅ 英文模型下载完成")
    
    # 检查模型文件
    home_dir = os.path.expanduser("~")
    easyocr_dir = os.path.join(home_dir, ".EasyOCR")
    
    if os.path.exists(easyocr_dir):
        files = os.listdir(easyocr_dir)
        pth_files = [f for f in files if f.endswith('.pth')]
        print(f"🎯 找到模型文件: {pth_files}")
        
        total_size = 0
        for model in pth_files:
            model_path = os.path.join(easyocr_dir, model)
            size = os.path.getsize(model_path) / (1024*1024)
            total_size += size
            print(f"   {model}: {size:.1f} MB")
        
        print(f"📏 总大小: {total_size:.1f} MB")
        
        # 复制模型文件到当前目录
        import shutil
        models_dir = "easyocr_models"
        if not os.path.exists(models_dir):
            os.makedirs(models_dir)
        
        for model in pth_files:
            src = os.path.join(easyocr_dir, model)
            dst = os.path.join(models_dir, model)
            shutil.copy2(src, dst)
            print(f"📋 复制 {model} 到 {models_dir}")
        
        print("🎉 模型文件准备完成！")
    else:
        print("❌ EasyOCR模型目录不存在")
        
except Exception as e:
    print(f"❌ 模型下载失败: {e}")
    exit(1)
"@
        
        # 保存脚本
        $downloadScript | Out-File -FilePath "download_models.py" -Encoding UTF8
        
        # 运行脚本
        python download_models.py
        
        # 检查结果
        if (Test-Path "easyocr_models") {
            $models = Get-ChildItem "easyocr_models" -Filter "*.pth"
            if ($models.Count -gt 0) {
                echo "✅ 模型文件准备成功"
                foreach ($model in $models) {
                    $size = $model.Length / (1024*1024)
                    echo "   $($model.Name): $([math]::Round($size, 2)) MB"
                }
            } else {
                echo "❌ 没有找到模型文件"
                exit 1
            }
        } else {
            echo "❌ 模型目录不存在"
            exit 1
        }
        
    - name: Build Windows EXE
      run: |
        pyinstaller --onefile --windowed --name=FileRenamer --clean --add-data "easyocr_models;easyocr_models" file_renamer_gui.py
          
    - name: Check build result
      run: |
        if (Test-Path "dist\FileRenamer.exe") {
          $size = (Get-Item "dist\FileRenamer.exe").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "✅ Windows EXE构建成功！文件大小: $sizeMB MB"
          dir dist\FileRenamer.exe
        } else {
          echo "❌ Windows EXE构建失败"
          exit 1
        }
        
    - name: Upload Windows EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: FileRenamer-Windows
        path: dist/FileRenamer.exe
        retention-days: 30
        
    - name: Create release tag
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        $version = Get-Date -Format "yyyy.MM.dd-HHmm"
        echo "BUILD_VERSION=$version" >> $env:GITHUB_ENV
        
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.BUILD_VERSION }}
        name: FileRenamer Windows v${{ env.BUILD_VERSION }}
        body: |
          🚀 FileRenamer Windows版本构建成功！
          
          📅 构建时间: ${{ env.BUILD_VERSION }}
          🖥️ 平台: Windows
          📦 文件: FileRenamer.exe
          
          ## 使用方法
          1. 下载 FileRenamer.exe
          2. 双击运行（需要Windows 10/11）
          3. 支持OCR文字识别和AI智能重命名
          
          ## 系统要求
          - Windows 10/11 (64位)
          - 至少4GB内存
          - 支持中文和英文OCR识别
        files: dist/FileRenamer.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
