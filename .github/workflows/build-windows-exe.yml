name: Build Windows EXE

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # 安装Chocolatey包管理器
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # 刷新Chocolatey包列表
        choco refresh
        
        # 安装Tesseract OCR（只安装基础包，语言包通过其他方式获取）
        choco install tesseract --yes
        
        # 设置环境变量
        echo "TESSDATA_PREFIX=C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata" >> $env:GITHUB_ENV
        
    - name: Download Tesseract language data
      run: |
        # 创建tessdata目录
        mkdir -p "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata"
        
        # 下载中文简体语言包
        Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/chi_sim.traineddata" -OutFile "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata\chi_sim.traineddata"
        
        # 下载英文语言包
        Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata" -OutFile "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata\eng.traineddata"
        
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
        pip install -r requirements_gui.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
        pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple/
        
    - name: Download EasyOCR models using EasyOCR
      run: |
        echo "Using EasyOCR to download model files..."
        
        # 创建Python脚本来下载模型
        echo 'import easyocr' > download_models.py
        echo 'import os' >> download_models.py
        echo 'import time' >> download_models.py
        echo 'import sys' >> download_models.py
        echo 'import glob' >> download_models.py
        echo '' >> download_models.py
        echo '# Force UTF-8 encoding for Windows compatibility' >> download_models.py
        echo 'if sys.platform.startswith("win"):' >> download_models.py
        echo '    import codecs' >> download_models.py
        echo '    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())' >> download_models.py
        echo '    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())' >> download_models.py
        echo '' >> download_models.py
        echo 'print("Starting EasyOCR model download...")' >> download_models.py
        echo '' >> download_models.py
        echo 'try:' >> download_models.py
        echo '    print("Downloading Chinese Simplified model...")' >> download_models.py
        echo '    reader_ch = easyocr.Reader(["ch_sim"], gpu=False)' >> download_models.py
        echo '    print("Chinese Simplified model download completed")' >> download_models.py
        echo '' >> download_models.py
        echo '    print("Downloading English model...")' >> download_models.py
        echo '    reader_en = easyocr.Reader(["en"], gpu=False)' >> download_models.py
        echo '    print("English model download completed")' >> download_models.py
        echo '' >> download_models.py
        echo '    # Check model files with detailed debugging' >> download_models.py
        echo '    print("Searching for model files...")' >> download_models.py
        echo '    home_dir = os.path.expanduser("~")' >> download_models.py
        echo '    print(f"Home directory: {home_dir}")' >> download_models.py
        echo '' >> download_models.py
        echo '    # Check multiple possible locations' >> download_models.py
        echo '    possible_dirs = [' >> download_models.py
        echo '        os.path.join(home_dir, ".EasyOCR"),' >> download_models.py
        echo '        os.path.join(home_dir, "AppData", "Local", "EasyOCR"),' >> download_models.py
        echo '        os.path.join(home_dir, "AppData", "Roaming", "EasyOCR"),' >> download_models.py
        echo '        os.path.join(home_dir, "Documents", "EasyOCR"),' >> download_models.py
        echo '        os.path.join(home_dir, "Downloads", "EasyOCR")' >> download_models.py
        echo '    ]' >> download_models.py
        echo '' >> download_models.py
        echo '    pth_files = []' >> download_models.py
        echo '    easyocr_dir = None' >> download_models.py
        echo '' >> download_models.py
        echo '    for check_dir in possible_dirs:' >> download_models.py
        echo '        print(f"Checking directory: {check_dir}")' >> download_models.py
        echo '        if os.path.exists(check_dir):' >> download_models.py
        echo '            print(f"  Directory exists")' >> download_models.py
        echo '            if os.path.isdir(check_dir):' >> download_models.py
        echo '                files = os.listdir(check_dir)' >> download_models.py
        echo '                print(f"  Files in directory: {files}")' >> download_models.py
        echo '                # Look for .pth files' >> download_models.py
        echo '                pth_files_in_dir = [f for f in files if f.endswith(".pth")]' >> download_models.py
        echo '                if pth_files_in_dir:' >> download_models.py
        echo '                    print(f"  Found .pth files: {pth_files_in_dir}")' >> download_models.py
        echo '                    pth_files.extend(pth_files_in_dir)' >> download_models.py
        echo '                    easyocr_dir = check_dir' >> download_models.py
        echo '                    break' >> download_models.py
        echo '                else:' >> download_models.py
        echo '                    print(f"  No .pth files found")' >> download_models.py
        echo '            else:' >> download_models.py
        echo '                print(f"  Not a directory")' >> download_models.py
        echo '        else:' >> download_models.py
        echo '            print(f"  Directory does not exist")' >> download_models.py
        echo '' >> download_models.py
        echo '    # Also search recursively in home directory' >> download_models.py
        echo '    if not pth_files:' >> download_models.py
        echo '        print("Searching recursively for .pth files...")' >> download_models.py
        echo '        for root, dirs, files in os.walk(home_dir):' >> download_models.py
        echo '            for file in files:' >> download_models.py
        echo '                if file.endswith(".pth"):' >> download_models.py
        echo '                    file_path = os.path.join(root, file)' >> download_models.py
        echo '                    print(f"Found .pth file: {file_path}")' >> download_models.py
        echo '                    pth_files.append(file)' >> download_models.py
        echo '                    if not easyocr_dir:' >> download_models.py
        echo '                        easyocr_dir = root' >> download_models.py
        echo '                    if len(pth_files) >= 2:  # Found both models' >> download_models.py
        echo '                        break' >> download_models.py
        echo '            if len(pth_files) >= 2:' >> download_models.py
        echo '                break' >> download_models.py
        echo '' >> download_models.py
        echo '    if pth_files:' >> download_models.py
        echo '        print(f"Found model files: {pth_files}")' >> download_models.py
        echo '        print(f"Model directory: {easyocr_dir}")' >> download_models.py
        echo '' >> download_models.py
        echo '        total_size = 0' >> download_models.py
        echo '        for model in pth_files:' >> download_models.py
        echo '            model_path = os.path.join(easyocr_dir, model)' >> download_models.py
        echo '            size = os.path.getsize(model_path) / (1024*1024)' >> download_models.py
        echo '            total_size += size' >> download_models.py
        echo '            print(f"   {model}: {size:.1f} MB")' >> download_models.py
        echo '' >> download_models.py
        echo '        print(f"Total size: {total_size:.1f} MB")' >> download_models.py
        echo '' >> download_models.py
        echo '        # Copy model files to current directory' >> download_models.py
        echo '        import shutil' >> download_models.py
        echo '        models_dir = "easyocr_models"' >> download_models.py
        echo '        if not os.path.exists(models_dir):' >> download_models.py
        echo '            os.makedirs(models_dir)' >> download_models.py
        echo '' >> download_models.py
        echo '        for model in pth_files:' >> download_models.py
        echo '            src = os.path.join(easyocr_dir, model)' >> download_models.py
        echo '            dst = os.path.join(models_dir, model)' >> download_models.py
        echo '            shutil.copy2(src, dst)' >> download_models.py
        echo '            print(f"Copied {model} to {models_dir}")' >> download_models.py
        echo '' >> download_models.py
        echo '        print("Model files preparation completed!")' >> download_models.py
        echo '    else:' >> download_models.py
        echo '        print("No .pth model files found in any location")' >> download_models.py
        echo '        print("This suggests the models were not downloaded or are in an unexpected location")' >> download_models.py
        echo '' >> download_models.py
        echo 'except Exception as e:' >> download_models.py
        echo '    print(f"Model download failed: {e}")' >> download_models.py
        echo '    import traceback' >> download_models.py
        echo '    traceback.print_exc()' >> download_models.py
        echo '    exit(1)' >> download_models.py
        
        # 运行脚本
        python download_models.py
        
        # 检查结果
        if (Test-Path "easyocr_models") {
            $models = Get-ChildItem "easyocr_models" -Filter "*.pth"
            if ($models.Count -gt 0) {
                echo "Model files preparation successful"
                foreach ($model in $models) {
                    $size = $model.Length / (1024*1024)
                    echo "   $($model.Name): $([math]::Round($size, 2)) MB"
                }
            } else {
                echo "No model files found"
                exit 1
            }
        } else {
            echo "Model directory does not exist"
            exit 1
        }
        
    - name: Build Windows EXE
      run: |
        # 验证模型文件存在
        if (Test-Path "easyocr_models") {
            $models = Get-ChildItem "easyocr_models" -Filter "*.pth"
            echo "Found $($models.Count) model files for packaging:"
            foreach ($model in $models) {
                $size = $model.Length / (1024*1024)
                echo "   $($model.Name): $([math]::Round($size, 2)) MB"
            }
        } else {
            echo "❌ easyocr_models directory not found!"
            exit 1
        }
        
        # 获取当前工作目录的绝对路径
        $currentDir = Get-Location
        $modelsDir = Join-Path $currentDir "easyocr_models"
        echo "Current directory: $currentDir"
        echo "Models directory: $modelsDir"
        
        # 验证模型目录存在
        if (Test-Path $modelsDir) {
            echo "✅ Models directory exists and is accessible"
        } else {
            echo "❌ Models directory not accessible"
            exit 1
        }
        
        # 使用绝对路径和正确的Windows语法
        echo "Starting PyInstaller build with models..."
        echo "PyInstaller command: pyinstaller --onefile --windowed --name=FileRenamer --clean --add-data '$modelsDir;easyocr_models' file_renamer_gui.py"
        
        # 先尝试不带--onefile的构建来验证数据文件包含
        echo "Testing data file inclusion with --onedir first..."
        pyinstaller --onedir --windowed --name=FileRenamer_test --clean --add-data "$modelsDir;easyocr_models" file_renamer_gui.py
        
        # 检查onedir构建结果
        if (Test-Path "dist\FileRenamer_test\easyocr_models") {
            echo "✅ --onedir build successfully included models"
            $testModels = Get-ChildItem "dist\FileRenamer_test\easyocr_models" -Filter "*.pth"
            echo "Test build models: $($testModels.Count)"
        } else {
            echo "❌ --onedir build failed to include models"
        }
        
        # 现在进行正式的--onefile构建
        echo "Starting final --onefile build..."
        
        # 使用更可靠的数据文件包含方法
        # 方法1：使用绝对路径
        pyinstaller --onefile --windowed --name=FileRenamer --clean --add-data "$modelsDir;easyocr_models" file_renamer_gui.py
        
        # 如果方法1失败，尝试方法2：使用相对路径
        if (-not (Test-Path "dist\FileRenamer.exe") -or (Get-Item "dist\FileRenamer.exe").Length -lt 100MB) {
            echo "Method 1 failed, trying method 2 with relative path..."
            pyinstaller --onefile --windowed --name=FileRenamer --clean --add-data "easyocr_models;easyocr_models" file_renamer_gui.py
        }
        
        # 如果方法2也失败，尝试方法3：使用datas参数
        if (-not (Test-Path "dist\FileRenamer.exe") -or (Get-Item "dist\FileRenamer.exe").Length -lt 100MB) {
            echo "Method 2 failed, trying method 3 with datas parameter..."
            pyinstaller --onefile --windowed --name=FileRenamer --clean --datas "easyocr_models;easyocr_models" file_renamer_gui.py
        }
        
        # 如果所有方法都失败，尝试方法4：使用collect-all
        if (-not (Test-Path "dist\FileRenamer.exe") -or (Get-Item "dist\FileRenamer.exe").Length -lt 100MB) {
            echo "Method 3 failed, trying method 4 with collect-all..."
            pyinstaller --onefile --windowed --name=FileRenamer --clean --collect-all "easyocr_models" file_renamer_gui.py
        }
        
        # 验证EXE是否包含模型文件
        if (Test-Path "dist\FileRenamer.exe") {
            echo "✅ EXE built successfully"
            
            # 检查EXE大小（应该包含模型文件）
            $exeSize = (Get-Item "dist\FileRenamer.exe").Length / (1024*1024)
            echo "EXE size: $([math]::Round($exeSize, 2)) MB"
            
            # 如果EXE大小小于100MB，可能模型文件没有包含
            if ($exeSize -lt 100) {
                echo "⚠️  Warning: EXE size seems small, models may not be included"
                echo "Expected size: >100MB (with models), Actual size: $([math]::Round($exeSize, 2)) MB"
            } else {
                echo "✅ EXE size looks correct, models should be included"
            }
        } else {
            echo "❌ EXE build failed"
            exit 1
        }
        
    - name: Check build result
      run: |
        if (Test-Path "dist\FileRenamer.exe") {
          $size = (Get-Item "dist\FileRenamer.exe").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "✅ Windows EXE构建成功！文件大小: $sizeMB MB"
          dir dist\FileRenamer.exe
        } else {
          echo "❌ Windows EXE构建失败"
          exit 1
        }
        
    - name: Upload Windows EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: FileRenamer-Windows
        path: dist/FileRenamer.exe
        retention-days: 30
        
    - name: Create release tag
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        $version = Get-Date -Format "yyyy.MM.dd-HHmm"
        echo "BUILD_VERSION=$version" >> $env:GITHUB_ENV
        
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.BUILD_VERSION }}
        name: FileRenamer Windows v${{ env.BUILD_VERSION }}
        body: |
          🚀 FileRenamer Windows版本构建成功！
          
          📅 构建时间: ${{ env.BUILD_VERSION }}
          🖥️ 平台: Windows
          📦 文件: FileRenamer.exe
          
          ## 使用方法
          1. 下载 FileRenamer.exe
          2. 双击运行（需要Windows 10/11）
          3. 支持OCR文字识别和AI智能重命名
          
          ## 系统要求
          - Windows 10/11 (64位)
          - 至少4GB内存
          - 支持中文和英文OCR识别
        files: dist/FileRenamer.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
