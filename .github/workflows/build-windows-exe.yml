name: Build Windows EXE

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # 安装Chocolatey包管理器
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # 刷新Chocolatey包列表
        choco refresh
        
        # 安装Tesseract OCR（只安装基础包，语言包通过其他方式获取）
        choco install tesseract --yes
        
        # 设置环境变量
        echo "TESSDATA_PREFIX=C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata" >> $env:GITHUB_ENV
        
    - name: Download Tesseract language data
      run: |
        # 创建tessdata目录
        mkdir -p "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata"
        
        # 下载中文简体语言包
        Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/chi_sim.traineddata" -OutFile "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata\chi_sim.traineddata"
        
        # 下载英文语言包
        Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata" -OutFile "C:\ProgramData\chocolatey\lib\tesseract\tools\tessdata\eng.traineddata"
        
    - name: Download EasyOCR models
      run: |
        # 创建模型目录
        mkdir -p easyocr_models
        
        # 尝试多个下载源
        $models = @(
          @{
            Name = "chinese_sim.pth"
            Urls = @(
              "https://github.com/JaidedAI/EasyOCR/releases/download/pre-v1.1.6/chinese_sim.pth",
              "https://huggingface.co/spaces/jaidedai/easyocr/resolve/main/chinese_sim.pth",
              "https://www.dropbox.com/s/8n02xqv3l9d5ziw/chinese_sim.pth?dl=1"
            )
            MinSizeMB = 40  # 最小文件大小（MB）
          },
          @{
            Name = "english.pth"
            Urls = @(
              "https://github.com/JaidedAI/EasyOCR/releases/download/pre-v1.1.6/english.pth",
              "https://huggingface.co/spaces/jaidedai/easyocr/resolve/main/english.pth",
              "https://www.dropbox.com/s/8n02xqv3l9d5ziw/english.pth?dl=1"
            )
            MinSizeMB = 40  # 最小文件大小（MB）
          }
        )
        
        foreach ($model in $models) {
          $modelName = $model.Name
          $urls = $model.Urls
          $minSizeMB = $model.MinSizeMB
          $success = $false
          
          Write-Host "⬇️  下载 $modelName..."
          
          foreach ($url in $urls) {
            try {
              Write-Host "   尝试从: $url"
              $response = Invoke-WebRequest -Uri $url -OutFile "easyocr_models/$modelName" -TimeoutSec 300
              if (Test-Path "easyocr_models/$modelName") {
                $size = (Get-Item "easyocr_models/$modelName").Length
                $sizeMB = [math]::Round($size / 1MB, 2)
                
                # 验证文件大小
                if ($sizeMB -ge $minSizeMB) {
                  Write-Host "✅ $modelName 下载成功，大小: $sizeMB MB"
                  $success = $true
                  break
                } else {
                  Write-Host "   ❌ 文件大小异常: $sizeMB MB (期望至少 $minSizeMB MB)"
                  Write-Host "   可能是错误页面，尝试下一个源..."
                  Remove-Item "easyocr_models/$modelName" -Force
                  continue
                }
              }
            } catch {
              Write-Host "   ❌ 从 $url 下载失败: $($_.Exception.Message)"
              continue
            }
          }
          
          if (-not $success) {
            Write-Host "❌ $modelName 所有下载源都失败了"
            return $false
          }
        }
        
        Write-Host "🎉 所有模型文件下载完成！"
        return $true
        
    - name: Check models download
      run: |
        if (Test-Path "easyocr_models/chinese_sim.pth") {
          $size = (Get-Item "easyocr_models/chinese_sim.pth").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "✅ 中文模型下载成功，大小: $sizeMB MB"
        } else {
          echo "❌ 中文模型下载失败"
          exit 1
        }
        
        if (Test-Path "easyocr_models/english.pth") {
          $size = (Get-Item "easyocr_models/english.pth").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "✅ 英文模型下载成功，大小: $sizeMB MB"
        } else {
          echo "❌ 英文模型下载失败"
          exit 1
        }
        
    - name: Upgrade pip
      run: python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple/
      
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
        pip install -r requirements_gui.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/
        pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple/
        
    - name: Build Windows EXE
      run: |
        pyinstaller --onefile --windowed --name=FileRenamer --clean --add-data "easyocr_models;easyocr_models" file_renamer_gui.py
          
    - name: Check build result
      run: |
        if (Test-Path "dist\FileRenamer.exe") {
          $size = (Get-Item "dist\FileRenamer.exe").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "✅ Windows EXE构建成功！文件大小: $sizeMB MB"
          dir dist\FileRenamer.exe
        } else {
          echo "❌ Windows EXE构建失败"
          exit 1
        }
        
    - name: Upload Windows EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: FileRenamer-Windows
        path: dist/FileRenamer.exe
        retention-days: 30
        
    - name: Create release tag
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        $version = Get-Date -Format "yyyy.MM.dd-HHmm"
        echo "BUILD_VERSION=$version" >> $env:GITHUB_ENV
        
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.BUILD_VERSION }}
        name: FileRenamer Windows v${{ env.BUILD_VERSION }}
        body: |
          🚀 FileRenamer Windows版本构建成功！
          
          📅 构建时间: ${{ env.BUILD_VERSION }}
          🖥️ 平台: Windows
          📦 文件: FileRenamer.exe
          
          ## 使用方法
          1. 下载 FileRenamer.exe
          2. 双击运行（需要Windows 10/11）
          3. 支持OCR文字识别和AI智能重命名
          
          ## 系统要求
          - Windows 10/11 (64位)
          - 至少4GB内存
          - 支持中文和英文OCR识别
        files: dist/FileRenamer.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
